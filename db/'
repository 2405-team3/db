'''
helper functions for vector search
'''
import os

from dotenv import load_dotenv
from llama_index.core import VectorStoreIndex
from llama_index.core import StorageContext
from llama_index.vector_stores.awsdocdb import AWSDocDbVectorStore
from llama_index.vector_stores.mongodb import MongoDBAtlasVectorSearch
import pymongo

import db.app_logger as log

load_dotenv(override=True)

# configs
# top_k = 5
environment = os.getenv('ENVIRONMENT', 'production')

log.info(f"vector.py: using environment '{environment}'")

COLLECTION_NAME = 'vector_index'
MONGO_URI = os.environ["MONGO_URI"]

class VectorIndex:
    def __init__(self, client):
        self._client = client

    # "interface" functions
    def get_retriever(self, db_name, top_k=None):
        if environment == 'mongoatlas':
            return self._read_mongo_atlas(db_name, top_k)

        return self._read_prod(db_name, top_k)


    def _read_prod(self, db_name, top_k):
        '''
        for DocDB (i.e., prod)
        '''
        store = AWSDocDbVectorStore(
            self._client,
            db_name=db_name,
            collection_name=COLLECTION_NAME
        )
        storage_context = StorageContext.from_defaults(vector_store=store)

        vector_index = VectorStoreIndex.from_vector_store(
            vector_store=store,
            storage_context=storage_context
        )

        if top_k:
            vector_retriever = vector_index.as_retriever(similarity_top_k=top_k)
        else:
            vector_retriever = vector_index.as_retriever()


        # mongodb_client.close()
        log.info("vector.py read_prod: vector retriever returned from mongo",
                f"{db_name}/{COLLECTION_NAME}")
        return vector_retriever

    def _read_mongo_atlas(self, db_name, top_k):
        '''
        for MongoAtlas (i.e., local)
        '''
        store = MongoDBAtlasVectorSearch(
            self._client,
            db_name=db_name,
            collection_name=COLLECTION_NAME
        )
        storage_context = StorageContext.from_defaults(vector_store=store)

        vector_index = VectorStoreIndex.from_vector_store(
            vector_store=store,
            storage_context=storage_context
        )

        if top_k:
            vector_retriever = vector_index.as_retriever(similarity_top_k=top_k)
        else:
            vector_retriever = vector_index.as_retriever()

        # mongodb_client.close()
        log.info("vector.py read_mongo_atlas: vector retriever returned from mongoAtlas",
                f"{db_name}/{COLLECTION_NAME}")
        return vector_retriever
